{"version":3,"sources":["../src/cli.js"],"names":["help","args","stream","file","skip","argv","process","slice","i","len","length","newline","escapeXML","fg","bg","console","log","require","__dirname","version","exit","convert","htmlStream","on","chunk","stdout","write","toHtml","createReadStream","encoding","stdin","setEncoding"],"mappings":"AAAA;AACA;;AACA,IAAMA,IAAI,ibAAV;AAeA,IAAMC,IAAI,GAAG;AACTC,EAAAA,MAAM,EAAE;AADC,CAAb;AAGA,IAAIC,IAAI,GAAG,IAAX;AAAA,IACIC,IAAI,GAAG,KADX;AAGA,IAAMC,IAAI,GAAGC,OAAO,CAACD,IAAR,CAAaE,KAAb,CAAmB,CAAnB,CAAb;;AACA,KACI,IAAIC,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGJ,IAAI,CAACK,MAD1B,EAEIF,CAAC,GAAGC,GAFR,EAGI,EAAED,CAHN,EAIE;AACE,MAAIJ,IAAJ,EAAU;AACNA,IAAAA,IAAI,GAAG,KAAP;AACA;AACH;;AACD,UAAQC,IAAI,CAACG,CAAD,CAAZ;AACI,SAAK,IAAL;AACA,SAAK,WAAL;AACIP,MAAAA,IAAI,CAACU,OAAL,GAAe,IAAf;AACA;;AACJ,SAAK,IAAL;AACA,SAAK,aAAL;AACIV,MAAAA,IAAI,CAACW,SAAL,GAAiB,IAAjB;AACA;;AACJ,SAAK,IAAL;AACA,SAAK,MAAL;AACIX,MAAAA,IAAI,CAACY,EAAL,GAAUR,IAAI,CAACG,CAAC,GAAG,CAAL,CAAd;AACAJ,MAAAA,IAAI,GAAG,IAAP;AACA;;AACJ,SAAK,IAAL;AACA,SAAK,MAAL;AACIH,MAAAA,IAAI,CAACa,EAAL,GAAUT,IAAI,CAACG,CAAC,GAAG,CAAL,CAAd;AACAJ,MAAAA,IAAI,GAAG,IAAP;AACA;;AACJ,SAAK,IAAL;AACA,SAAK,WAAL;AACIW,MAAAA,OAAO,CAACC,GAAR,CAAYC,OAAO,CAACC,SAAS,GAAG,kBAAb,CAAP,CAAwCC,OAApD;AACAb,MAAAA,OAAO,CAACc,IAAR,CAAa,CAAb,EAFJ,CAGI;;AACA;;AACJ,SAAK,IAAL;AACA,SAAK,QAAL;AACIL,MAAAA,OAAO,CAACC,GAAR,CAAYhB,IAAZ;AACAM,MAAAA,OAAO,CAACc,IAAR,CAAa,CAAb,EAFJ,CAGI;;AACA;;AACJ;AACIjB,MAAAA,IAAI,GAAGE,IAAI,CAACG,CAAD,CAAX;AAhCR;AAkCH;;AAED,IAAMa,OAAO,GAAG,KAAKJ,OAAO,CAAC,mBAAD,CAAZ,EAAmChB,IAAnC,CAAhB;;AAEA,IAAMqB,UAAU,GAAG,SAAbA,UAAa,CAAUpB,MAAV,EAAkB;AACjC,SAAOA,MAAM,CAACqB,EAAP,CAAU,MAAV,EAAkB,UAAUC,KAAV,EAAiB;AACtC,WAAOlB,OAAO,CAACmB,MAAR,CAAeC,KAAf,CAAqBL,OAAO,CAACM,MAAR,CAAeH,KAAf,CAArB,CAAP;AACH,GAFM,CAAP;AAGH,CAJD;;AAMA,IAAIrB,IAAJ,EAAU;AACN,MAAMD,MAAM,GAAGe,OAAO,CAAC,IAAD,CAAP,CAAcW,gBAAd,CAA+BzB,IAA/B,EAAqC;AAAC0B,IAAAA,QAAQ,EAAE;AAAX,GAArC,CAAf;;AACAP,EAAAA,UAAU,CAACpB,MAAD,CAAV;AACH,CAHD,MAGO;AACHI,EAAAA,OAAO,CAACwB,KAAR,CAAcC,WAAd,CAA0B,MAA1B;AACAT,EAAAA,UAAU,CAAChB,OAAO,CAACwB,KAAT,CAAV;AACH","sourcesContent":["'use strict';\r\n/* eslint no-console:0 */\r\nconst help = `\r\nusage: ansi-to-html [options] [file]\r\n\r\nfile:  The file to display or stdin\r\n\r\noptions:\r\n\r\n    -f, --fg         The background color used for resets (#000)\r\n    -b, --bg         The foreground color used for resets (#FFF)\r\n    -n, --newline    Convert newline characters to <br/>  (false)\r\n    -x, --escapeXML  Generate XML entities                (false)\r\n    -v, --version    Print version\r\n    -h, --help       Print help\r\n`;\r\n\r\nconst args = {\r\n    stream: true\r\n};\r\nlet file = null,\r\n    skip = false;\r\n\r\nconst argv = process.argv.slice(2);\r\nfor (\r\n    let i = 0, len = argv.length;\r\n    i < len;\r\n    ++i\r\n) {\r\n    if (skip) {\r\n        skip = false;\r\n        continue;\r\n    }\r\n    switch (argv[i]) {\r\n        case '-n':\r\n        case '--newline':\r\n            args.newline = true;\r\n            break;\r\n        case '-x':\r\n        case '--escapeXML':\r\n            args.escapeXML = true;\r\n            break;\r\n        case '-f':\r\n        case '--fg':\r\n            args.fg = argv[i + 1];\r\n            skip = true;\r\n            break;\r\n        case '-b':\r\n        case '--bg':\r\n            args.bg = argv[i + 1];\r\n            skip = true;\r\n            break;\r\n        case '-v':\r\n        case '--version':\r\n            console.log(require(__dirname + '/../package.json').version);\r\n            process.exit(0);\r\n            // istanbul ignore next\r\n            break;\r\n        case '-h':\r\n        case '--help':\r\n            console.log(help);\r\n            process.exit(0);\r\n            // istanbul ignore next\r\n            break;\r\n        default:\r\n            file = argv[i];\r\n    }\r\n}\r\n\r\nconst convert = new (require('./ansi_to_html.js'))(args);\r\n\r\nconst htmlStream = function (stream) {\r\n    return stream.on('data', function (chunk) {\r\n        return process.stdout.write(convert.toHtml(chunk));\r\n    });\r\n};\r\n\r\nif (file) {\r\n    const stream = require('fs').createReadStream(file, {encoding: 'utf8'});\r\n    htmlStream(stream);\r\n} else {\r\n    process.stdin.setEncoding('utf8');\r\n    htmlStream(process.stdin);\r\n}\r\n"],"file":"cli.js"}